<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RangedModDamageDesc" xml:space="preserve">
    <value>Range-Modefier for bows/guns/crossbows:
Default range is somewhere between 0.3 and 0.4 yards,
all blizzard ranged weapons have RangedModRange100</value>
  </data>
  <data name="SpellChargesDesc" xml:space="preserve">
    <value>The number of times that the item can cast the spell. If 0, then infinite charges are possible. If negative, then after the number of charges is depleted, the item is deleted as well. If positive, then the item is not deleted after all the charges are spent.</value>
  </data>
  <data name="SheathDesc" xml:space="preserve">
    <value>Controls how the item is put away on the character (pressing the 'Z' hotkey).</value>
  </data>
  <data name="ReqSkillDesc" xml:space="preserve">
    <value>The skill required to use this item. See SkillLine.dbc</value>
  </data>
  <data name="DurationDesc" xml:space="preserve">
    <value>he duration of the item in seconds. If positive, it is the duration measured in ingame time. If negative, it is the duration measured in real time.</value>
  </data>
  <data name="MaxCountDesc" xml:space="preserve">
    <value>Maximum number of copies of this item a player can have. Use 0 for infinite</value>
  </data>
  <data name="SpellCatCdDesc" xml:space="preserve">
    <value>The cooldown time in milliseconds that is applied to all other spells in the category that the triggered spell is also in. Use -1 to use the default spell cooldown.</value>
  </data>
  <data name="AreaDesc" xml:space="preserve">
    <value>The zone ID that this item can be used in.</value>
  </data>
  <data name="SocketColorDesc" xml:space="preserve">
    <value>The color of the socket that can be placed in this item.</value>
  </data>
  <data name="SellGoldDesc" xml:space="preserve">
    <value>The price that the vendor will pay you for the item when you sell it and if it is possible to be sold, in copper. Put in 0 if the item cannot be sold to a vendor.</value>
  </data>
  <data name="RandomPropDesc" xml:space="preserve">
    <value>The number in this field points to item_enchantment_template.entry and ties in an item's chance at having a random property attached to it when it shows up for the first time. This field and the RandomSuffix field CANNOT both have non-zero values. Either one is filled, or the other. Also, the primary source for the number in this field are WDBs.</value>
  </data>
  <data name="DescriptionDesc" xml:space="preserve">
    <value>The description that appears in orange letters at the bottom of the item tooltip.</value>
  </data>
  <data name="ReqHonorRankDesc" xml:space="preserve">
    <value>The honor rank the player needs to have to use this item.</value>
  </data>
  <data name="PageTextDesc" xml:space="preserve">
    <value>The ID referring to the text that the item will show (if it is a book or a letter, etc). The item will have a magnifying glass cursor in the game and will show the text when right-clicked. See page_text.entry</value>
  </data>
  <data name="DisenchantIdDesc" xml:space="preserve">
    <value>The disenchant loot template ID. See disenchant_loot_template.entry</value>
  </data>
  <data name="ReqDisenchSkillDesc" xml:space="preserve">
    <value>The required proficiency in disenchanting that the player needs to have to be able to disenchant this item.</value>
  </data>
  <data name="ReqLevelDesc" xml:space="preserve">
    <value>Required level the player has to be to use this item.</value>
  </data>
  <data name="SpellIdDesc" xml:space="preserve">
    <value>The spell ID of the spell that the item can cast or trigger.</value>
  </data>
  <data name="SpellPpmRateDesc" xml:space="preserve">
    <value>The proc per minute rate controlling how often the spell is triggered (if #spelltrigger == 2).</value>
  </data>
  <data name="ReqSpellDesc" xml:space="preserve">
    <value>The required spell that the player needs to have to use this item</value>
  </data>
  <data name="ContainerSlotsDesc" xml:space="preserve">
    <value>If the item is a bag, this field controls the number of slots the bag has.</value>
  </data>
  <data name="ReqRepFactionDesc" xml:space="preserve">
    <value>The faction template ID (from Faction.dbc) of the faction that the player has to have a certain ranking with. If this value is 0, the faction of the seller of the item is used.</value>
  </data>
  <data name="ScalingStatDistDesc" xml:space="preserve">
    <value>Similar to Static Stats these are the Stats that grow along with the users level (mainly heirloom leveling gear)
use like static stats</value>
  </data>
  <data name="MapDesc" xml:space="preserve">
    <value>The map ID that this item can be used in.</value>
  </data>
  <data name="ItemSetDesc" xml:space="preserve">
    <value>The ID of the item set that this item belongs to. To save you some time, you CAN NOT make up new item sets. Item sets are defined in ItemSet.dbc</value>
  </data>
  <data name="ReqSkillRankDesc" xml:space="preserve">
    <value>The required skill rank the player needs to have to use this item.</value>
  </data>
  <data name="MaxMoneyLootDesc" xml:space="preserve">
    <value>If the item is a container that can contain money, then this field defines the maximum coinage held in this container, in copper.</value>
  </data>
  <data name="BuyCountDesc" xml:space="preserve">
    <value>The size of the item stack when sold by vendors. Also if a vendor has limited copies of this item available, everytime the vendor list is refreshed (See npc_vendor.incrtime), the number of copies increases by this number.</value>
  </data>
  <data name="AmmoTypeDesc" xml:space="preserve">
    <value>The type of ammunition the item uses</value>
  </data>
  <data name="PageMatDesc" xml:space="preserve">
    <value>The background texture that appears in the page text window. PageTextMaterial.dbc</value>
  </data>
  <data name="DelayDesc" xml:space="preserve">
    <value>The time in milliseconds between successive hits.</value>
  </data>
  <data name="BagFamilyDesc" xml:space="preserve">
    <value>If the item is a bag, this field is a bitmask controlling what types of items can be put in this bag. You can combine different types by adding up the bit numbers.</value>
  </data>
  <data name="SpellCdDesc" xml:space="preserve">
    <value>The cooldown in milliseconds for the specific spell controlling how often the spell can be used. Use -1 to use the default spell cooldown. Note: this is not the "internal cooldown" of procs commonly found on items such as trinkets with "Chance on hit" effects.</value>
  </data>
  <data name="MatDesc" xml:space="preserve">
    <value>The material that the item is made of. The value here affects the sound that the item makes when moved. Use -1 for consumable items like food, reagents, etc.</value>
  </data>
  <data name="StartQuestDesc" xml:space="preserve">
    <value>The ID of the quest that this item will start if right-clicked. See quest_template.id</value>
  </data>
  <data name="FoodTypeDesc" xml:space="preserve">
    <value>If this item is a food type item, this field defines what type of food it is for hunters who want to feed their pets. It controls in what diet this food item falls in.
NOTE: Raw meat and fish is not the same as regular meat and fish. It seems that the last two types of diets include grey "poor" types of food that players have no use for but some pets seem to be able to eat. Also, those food types appeared in TBC so most likely only TBC pets will have those types of diets.</value>
  </data>
  <data name="RandomSuffixDesc" xml:space="preserve">
    <value>The number in this field points to item_enchantment_template.entry and ties in an item's chance at having a random suffix attached to it when it shows up for the first time. This field and the RandomProperty field CANNOT both have non-zero values. Either one is filled, or the other. Also, the primary source for the number in this field are WDBs.</value>
  </data>
  <data name="StackableDesc" xml:space="preserve">
    <value>The number of copies of this item that can be stacked in the same slot.</value>
  </data>
  <data name="MinMoneyLootDesc" xml:space="preserve">
    <value>If the item is a container that can contain money, then this field defines the minimum coinage held in this container, in copper.</value>
  </data>
  <data name="SpellCatDesc" xml:space="preserve">
    <value>The category that the spell is in.</value>
  </data>
  <data name="ScalingStatValueDesc" xml:space="preserve">
    <value>Final (level 80) value of the scaling-stat</value>
  </data>
  <data name="LockIdDesc" xml:space="preserve">
    <value>The lock entry ID that this item (which serves as a key) is tied to. This field is used in key-door mechanics. See Lock.dbc</value>
  </data>
  <data name="SpellTriggerDesc" xml:space="preserve">
    <value>The type of trigger for the spell.</value>
  </data>
  <data name="StatsCountDesc" xml:space="preserve">
    <value>When an item has entries in stat_type, this must be updated to display those entries
(Unknown how this works)</value>
  </data>
  <data name="LanguageIdDesc" xml:space="preserve">
    <value>The language that the item text is written in. Languages.dbc</value>
  </data>
  <data name="RandomArmorDmgModDesc" xml:space="preserve">
    <value>No description for this field, visit trinitycore website for more info.</value>
  </data>
  <data name="ScriptNameDesc" xml:space="preserve">
    <value>he name of the script that the item should use. There is no 'internalitemhandler' or 'internalitemhanler' script so trinity will ignore any such values in this field.</value>
  </data>
  <data name="FlagsDesc" xml:space="preserve">
    <value>Bitmask field that contains flags that the item has on it. As all other such fields, just add the flags together to combine them. Possible flags are listed below</value>
  </data>
  <data name="AllowConnDesc" xml:space="preserve">
    <value>Sets whether the world accepts new client connections. Even if the server is online.</value>
  </data>
  <data name="TotemCatDesc" xml:space="preserve">
    <value>Corresponds to the ID in TotemCategory.dbc.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="TrinityCore Logo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\TrinityCore Logo.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>